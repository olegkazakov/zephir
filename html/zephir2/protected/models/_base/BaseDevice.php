<?php

/**
 * This is the model base class for the table "device".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Device".
 *
 * Columns in table "device" available as properties of the model,
 * followed by relations of table "device" available as properties of the model.
 *
 * @property integer $device_id
 * @property integer $official_id
 * @property integer $device_model_id
 * @property string $serial_number
 * @property string $country
 * @property string $postal_code
 * @property string $region
 * @property string $city
 * @property string $address
 * @property double $total_income
 * @property double $total_expence
 * @property double $lat
 * @property double $lon
 * @property integer $status_id
 *
 * @property DeviceType $deviceModel
 * @property Official $official
 * @property DeviceStatus $status
 * @property DevicePart[] $deviceParts
 */
abstract class BaseDevice extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'device';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Device|Devices', $n);
	}

	public static function representingColumn() {
		return 'serial_number';
	}

	public function rules() {
		return array(
			array('official_id, device_model_id, serial_number, postal_code, region, city, address, status_id', 'required'),
			array('official_id, device_model_id, status_id', 'numerical', 'integerOnly'=>true),
			array('total_income, total_expence, lat, lon', 'numerical'),
			array('serial_number', 'length', 'max'=>55),
			array('country', 'length', 'max'=>50),
			array('postal_code, region, city', 'length', 'max'=>45),
			array('address', 'length', 'max'=>255),
			array('country, total_income, total_expence, lat, lon', 'default', 'setOnEmpty' => true, 'value' => null),
			array('device_id, official_id, device_model_id, serial_number, country, postal_code, region, city, address, total_income, total_expence, lat, lon, status_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'deviceModel' => array(self::BELONGS_TO, 'DeviceType', 'device_model_id'),
			'official' => array(self::BELONGS_TO, 'Official', 'official_id'),
			'status' => array(self::BELONGS_TO, 'DeviceStatus', 'status_id'),
			'deviceParts' => array(self::HAS_MANY, 'DevicePart', 'device_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'device_id' => Yii::t('app', 'Device'),
			'official_id' => null,
			'device_model_id' => null,
			'serial_number' => Yii::t('app', 'Serial Number'),
			'country' => Yii::t('app', 'Country'),
			'postal_code' => Yii::t('app', 'Postal Code'),
			'region' => Yii::t('app', 'Region'),
			'city' => Yii::t('app', 'City'),
			'address' => Yii::t('app', 'Address'),
			'total_income' => Yii::t('app', 'Total Income'),
			'total_expence' => Yii::t('app', 'Total Expence'),
			'lat' => Yii::t('app', 'Lat'),
			'lon' => Yii::t('app', 'Lon'),
			'status_id' => null,
			'deviceModel' => null,
			'official' => null,
			'status' => null,
			'deviceParts' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('device_id', $this->device_id);
		$criteria->compare('official_id', $this->official_id);
		$criteria->compare('device_model_id', $this->device_model_id);
		$criteria->compare('serial_number', $this->serial_number, true);
		$criteria->compare('country', $this->country, true);
		$criteria->compare('postal_code', $this->postal_code, true);
		$criteria->compare('region', $this->region, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('total_income', $this->total_income);
		$criteria->compare('total_expence', $this->total_expence);
		$criteria->compare('lat', $this->lat);
		$criteria->compare('lon', $this->lon);
		$criteria->compare('status_id', $this->status_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}