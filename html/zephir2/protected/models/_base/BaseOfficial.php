<?php

/**
 * This is the model base class for the table "official".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Official".
 *
 * Columns in table "official" available as properties of the model,
 * followed by relations of table "official" available as properties of the model.
 *
 * @property integer $official_id
 * @property integer $user_id
 * @property string $inn
 * @property string $ogrn
 * @property string $firm_name
 * @property string $contact
 * @property string $contact_phone
 * @property integer $firm_type_id
 *
 * @property Account[] $accounts
 * @property Device[] $devices
 * @property DocLinks[] $docLinks
 * @property Offer[] $offers
 * @property FirmType $firmType
 * @property User $user
 */
abstract class BaseOfficial extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'official';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Official|Officials', $n);
	}

	public static function representingColumn() {
		return 'contact_phone';
	}

	public function rules() {
		return array(
			array('user_id, inn, ogrn, contact_phone, firm_type_id', 'required'),
			array('user_id, firm_type_id', 'numerical', 'integerOnly'=>true),
			array('inn, ogrn', 'length', 'max'=>15),
			array('firm_name', 'length', 'max'=>100),
			array('contact', 'length', 'max'=>250),
			array('contact_phone', 'length', 'max'=>25),
			array('firm_name, contact', 'default', 'setOnEmpty' => true, 'value' => null),
			array('official_id, user_id, inn, ogrn, firm_name, contact, contact_phone, firm_type_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'accounts' => array(self::HAS_MANY, 'Account', 'official_id'),
			'devices' => array(self::HAS_MANY, 'Device', 'official_id'),
			'docLinks' => array(self::HAS_MANY, 'DocLinks', 'official_id'),
			'offers' => array(self::HAS_MANY, 'Offer', 'official_id'),
			'firmType' => array(self::BELONGS_TO, 'FirmType', 'firm_type_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'official_id' => Yii::t('app', 'Official'),
			'user_id' => null,
			'inn' => Yii::t('app', 'Inn'),
			'ogrn' => Yii::t('app', 'Ogrn'),
			'firm_name' => Yii::t('app', 'Firm Name'),
			'contact' => Yii::t('app', 'Contact'),
			'contact_phone' => Yii::t('app', 'Contact Phone'),
			'firm_type_id' => null,
			'accounts' => null,
			'devices' => null,
			'docLinks' => null,
			'offers' => null,
			'firmType' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('official_id', $this->official_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('inn', $this->inn, true);
		$criteria->compare('ogrn', $this->ogrn, true);
		$criteria->compare('firm_name', $this->firm_name, true);
		$criteria->compare('contact', $this->contact, true);
		$criteria->compare('contact_phone', $this->contact_phone, true);
		$criteria->compare('firm_type_id', $this->firm_type_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}